#!/usr/bin/env node

const { spawn } = require('child_process');
const path = require('path');

console.log('üöÄ –ó–∞–ø—É—Å–∫ ITM Marketplace –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ —Å Hot Reload...\n');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å —Ü–≤–µ—Ç–Ω—ã–º –≤—ã–≤–æ–¥–æ–º
function runCommand(command, args, options = {}) {
  const process = spawn(command, args, {
    stdio: 'inherit',
    shell: true,
    ...options
  });
  
  return process;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ URL-–∞–¥—Ä–µ—Å–æ–≤
function showUrls() {
  console.log('\nüåê –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã:');
  console.log('   Frontend (React):     http://localhost:3000');
  console.log('   Users API:            http://localhost:8001');
  console.log('   Companies API:        http://localhost:8003');
  console.log('   Operator API:         http://localhost:8002');
  console.log('   PostgreSQL DB:        localhost:5500');
  console.log('\n‚ú® Hot Reload –≤–∫–ª—é—á–µ–Ω –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞!\n');
}

async function main() {
  try {
    console.log('üì¶ –ó–∞–ø—É—Å–∫ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–æ–≤ –≤ Docker...');
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å—ã –≤ Docker (–±–µ–∑ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞)
    const dockerProcess = spawn('docker-compose', [
      '-f', 'docker-compose.dev.yml',
      'up', '-d'
    ], {
      stdio: 'pipe',
      shell: true
    });

    dockerProcess.stdout.on('data', (data) => {
      process.stdout.write(`[Docker] ${data}`);
    });

    dockerProcess.stderr.on('data', (data) => {
      process.stderr.write(`[Docker] ${data}`);
    });

    // –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ Docker —Å–µ—Ä–≤–∏—Å–æ–≤
    await new Promise((resolve, reject) => {
      dockerProcess.on('close', (code) => {
        if (code === 0) {
          console.log('‚úÖ –ú–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ');
          resolve();
        } else {
          reject(new Error(`Docker –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –∫–æ–¥–æ–º ${code}`));
        }
      });
    });

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º URL-–∞–¥—Ä–µ—Å–∞
    showUrls();

    // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–æ–≤
    console.log('‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–æ–≤...');
    await new Promise(resolve => setTimeout(resolve, 3000));

    console.log('üé® –ó–∞–ø—É—Å–∫ React —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ —Å Hot Reload...');
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ –ª–æ–∫–∞–ª—å–Ω–æ –¥–ª—è Hot Reload
    const frontendProcess = runCommand('npm', ['start'], {
      cwd: path.join(__dirname, '../frontend'),
      env: {
        ...process.env,
        BROWSER: 'none', // –ù–µ –æ—Ç–∫—Ä—ã–≤–∞—Ç—å –±—Ä–∞—É–∑–µ—Ä –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        PORT: '3000'
      }
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    process.on('SIGINT', () => {
      console.log('\nüõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...');
      frontendProcess.kill();
      runCommand('docker-compose', ['-f', 'docker-compose.dev.yml', 'down']);
      process.exit(0);
    });

    process.on('SIGTERM', () => {
      console.log('\nüõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...');
      frontendProcess.kill();
      runCommand('docker-compose', ['-f', 'docker-compose.dev.yml', 'down']);
      process.exit(0);
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ:', error.message);
    process.exit(1);
  }
}

main();
